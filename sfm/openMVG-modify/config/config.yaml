imgDir: "/home/csl/dataset/rosbag-reader-ros1/EuRoC/cam0/images"
outputDir: "../new_output"
fileDatabasePath: "../config/sensor_width_camera_database.txt"

SfMInitImageListing:
  # cameraModel choice:
  # PINHOLE_CAMERA_START(0)
  # PINHOLE_CAMERA(1) No distortion
  # PINHOLE_CAMERA_RADIAL1(2) radial distortion K1
  # PINHOLE_CAMERA_RADIAL3(3) radial distortion K1,K2,K3
  # PINHOLE_CAMERA_BROWN(4) radial distortion K1,K2,K3, tangential distortion T1,T2
  # PINHOLE_CAMERA_FISHEYE(5) a simple Fish-eye distortion model with 4 distortion coefficients
  # CAMERA_SPHERICAL(7)
  cameraModel: 3
  # the focal length (pixels)
  # if the camera is contained int the file database, make it -1.0.
  # otherwise, you should submit an approximate focal length by using: Max(image<Width, Height>) * 1.2
  focalPixels: 458.654
  #  true: view can share some camera intrinsic parameters
  # false: each view have its own camera intrinsic parameters
  groupCameraModel: true
  # GPS_XYZ_Method choice:
  # ECEF(0) or UTM(1) XYZ position to the GPS position array
  GPS_XYZ_Method: 0
  # Use pose prior if GPS EXIF pose is available
  usePosePrior: false
  # "x;y;z;" of weights for each dimension of the prior (default: 1.0)
  priorWeights: "1.0;1.0;1.0"


ComputeFeatures:
  # use upright feature
  upRight: false
  # force to recompute data
  force: false
  # imageDescriberMethod choice:
  # SIFT: default
  # SIFT_ANATOMY
  # AKAZE_FLOAT: AKAZE with floating point descriptors
  # AKAZE_MLDB: AKAZE with binary descriptors
  imageDescriberMethod: "SIFT"
  # number of parallel computations
  numThreads: 4

PairGenerator:
  # pairMode choice:
  # EXHAUSTIVE: Build all possible pairs
  # CONTIGUOUS: Build pairs for contiguous images
  pairMode: "EXHAUSTIVE"
  # number of contiguous links [if you use 'CONTIGUOUS', make it a positive number]
  # e.g.
  # 2: will match 0 with (1,2), 1 with (2,3), ...
  # 3: will match 0 with (1,2,3), 1 with (2,3,4), ...
  contiguousCount: -1

ComputeMatches:
  # distance ratio to discard non meaningful matches, 0.8: (default)
  distRatio: 0.8
  # nearestMatchingMethod choice:
  # AUTO: auto choice from regions type
  # For Scalar based regions descriptor:
  # BRUTEFORCEL2: L2 BruteForce matching
  # BRUTEFORCEHAMMING: BruteForce Hamming matching
  # HNSWL2: L2 Approximate Matching with Hierarchical Navigable Small World graphs
  # HNSWL1: L1 Approximate Matching with Hierarchical Navigable Small World graphs tailored for quantized and histogram based descriptors
  # HNSWHAMMING: Hamming Approximate Matching with Hierarchical Navigable Small World graphs
  # ANNL2: L2 Approximate Nearest Neighbor matching
  # CASCADEHASHINGL2: L2 Cascade Hashing matching
  # FASTCASCADEHASHINGL2: L2 Cascade Hashing with precomputed hashed regions(faster than CASCADEHASHINGL2 but use more memory)
  nearestMatchingMethod: "AUTO"
  # force to recompute data
  force: false

GeometricFilter:
  # geometricModel choice:
  # f: fundamental matrix
  # e: essential matrix
  # h: homography matrix
  # a: essential matrix with an angular parametrization
  # u: upright essential matrix with an angular parametrization
  # o: orthographic essential matrix
  geometricModel: "f"
  # force to recompute data
  force: false
  # use the found model to improve the pairwise correspondences.
  guidedMatching: false
  maxIteration: 2048

GlobalSfM:
  # engineName choice:
  # INCREMENTAL: add image sequentially to a 2 view seed
  # INCREMENTALV2: add image sequentially to a 2 or N view seed (experimental)
  # GLOBAL: initialize globally rotation and translations
  engineName: "GLOBAL"
